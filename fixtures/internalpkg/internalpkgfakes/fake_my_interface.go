// Code generated by counterfeiter. DO NOT EDIT.
package internalpkgfakes

import (
	"sync"

	"github.com/maxbrunsfeld/counterfeiter/v6/fixtures/internalpkg"
	"github.com/maxbrunsfeld/counterfeiter/v6/fixtures/internalpkg/internal"
)

type FakeMyInterface struct {
	MyFuncStub        func(internal.Context)
	myFuncMutex       sync.RWMutex
	myFuncArgsForCall []struct {
		arg1 internal.Context
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMyInterface) MyFunc(arg1 internal.Context) {
	fake.myFuncMutex.Lock()
	fake.myFuncArgsForCall = append(fake.myFuncArgsForCall, struct {
		arg1 internal.Context
	}{arg1})
	stub := fake.MyFuncStub
	fake.recordInvocation("MyFunc", []interface{}{arg1})
	fake.myFuncMutex.Unlock()
	if stub != nil {
		fake.MyFuncStub(arg1)
	}
}

func (fake *FakeMyInterface) MyFuncCallCount() int {
	fake.myFuncMutex.RLock()
	defer fake.myFuncMutex.RUnlock()
	return len(fake.myFuncArgsForCall)
}

func (fake *FakeMyInterface) MyFuncCalls(stub func(internal.Context)) {
	fake.myFuncMutex.Lock()
	defer fake.myFuncMutex.Unlock()
	fake.MyFuncStub = stub
}

func (fake *FakeMyInterface) MyFuncArgsForCall(i int) internal.Context {
	fake.myFuncMutex.RLock()
	defer fake.myFuncMutex.RUnlock()
	argsForCall := fake.myFuncArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMyInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.myFuncMutex.RLock()
	defer fake.myFuncMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMyInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ internalpkg.MyInterface = new(FakeMyInterface)
