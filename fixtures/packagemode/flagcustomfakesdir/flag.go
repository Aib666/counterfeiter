// Code generated by counterfeiter. DO NOT EDIT.
package flagshim

import (
	"flag"
	"time"
)

//go:generate go run github.com/maxbrunsfeld/counterfeiter/v6 -generate
//counterfeiter:generate . Flag

// Flag is a generated interface representing the exported functions
// in the flag package.
type Flag interface {
	Arg(arg1 int) string
	Args() []string
	Bool(arg1 string, arg2 bool, arg3 string) *bool
	BoolVar(arg1 *bool, arg2 string, arg3 bool, arg4 string)
	Duration(arg1 string, arg2 time.Duration, arg3 string) *time.Duration
	DurationVar(arg1 *time.Duration, arg2 string, arg3 time.Duration, arg4 string)
	Float64(arg1 string, arg2 float64, arg3 string) *float64
	Float64Var(arg1 *float64, arg2 string, arg3 float64, arg4 string)
	Func(arg1 string, arg2 string, arg3 func(string) error)
	Int(arg1 string, arg2 int, arg3 string) *int
	Int64(arg1 string, arg2 int64, arg3 string) *int64
	Int64Var(arg1 *int64, arg2 string, arg3 int64, arg4 string)
	IntVar(arg1 *int, arg2 string, arg3 int, arg4 string)
	Lookup(arg1 string) *flag.Flag
	NArg() int
	NFlag() int
	NewFlagSet(arg1 string, arg2 flag.ErrorHandling) *flag.FlagSet
	Parse()
	Parsed() bool
	PrintDefaults()
	Set(arg1 string, arg2 string) error
	String(arg1 string, arg2 string, arg3 string) *string
	StringVar(arg1 *string, arg2 string, arg3 string, arg4 string)
	Uint(arg1 string, arg2 uint, arg3 string) *uint
	Uint64(arg1 string, arg2 uint64, arg3 string) *uint64
	Uint64Var(arg1 *uint64, arg2 string, arg3 uint64, arg4 string)
	UintVar(arg1 *uint, arg2 string, arg3 uint, arg4 string)
	UnquoteUsage(arg1 *flag.Flag) (string, string)
	Var(arg1 flag.Value, arg2 string, arg3 string)
	Visit(arg1 func(*flag.Flag))
	VisitAll(arg1 func(*flag.Flag))
}

type FlagShim struct{}

func (p *FlagShim) Arg(arg1 int) string {
	return flag.Arg(arg1)
}

func (p *FlagShim) Args() []string {
	return flag.Args()
}

func (p *FlagShim) Bool(arg1 string, arg2 bool, arg3 string) *bool {
	return flag.Bool(arg1, arg2, arg3)
}

func (p *FlagShim) BoolVar(arg1 *bool, arg2 string, arg3 bool, arg4 string) {
	flag.BoolVar(arg1, arg2, arg3, arg4)
}

func (p *FlagShim) Duration(arg1 string, arg2 time.Duration, arg3 string) *time.Duration {
	return flag.Duration(arg1, arg2, arg3)
}

func (p *FlagShim) DurationVar(arg1 *time.Duration, arg2 string, arg3 time.Duration, arg4 string) {
	flag.DurationVar(arg1, arg2, arg3, arg4)
}

func (p *FlagShim) Float64(arg1 string, arg2 float64, arg3 string) *float64 {
	return flag.Float64(arg1, arg2, arg3)
}

func (p *FlagShim) Float64Var(arg1 *float64, arg2 string, arg3 float64, arg4 string) {
	flag.Float64Var(arg1, arg2, arg3, arg4)
}

func (p *FlagShim) Func(arg1 string, arg2 string, arg3 func(string) error) {
	flag.Func(arg1, arg2, arg3)
}

func (p *FlagShim) Int(arg1 string, arg2 int, arg3 string) *int {
	return flag.Int(arg1, arg2, arg3)
}

func (p *FlagShim) Int64(arg1 string, arg2 int64, arg3 string) *int64 {
	return flag.Int64(arg1, arg2, arg3)
}

func (p *FlagShim) Int64Var(arg1 *int64, arg2 string, arg3 int64, arg4 string) {
	flag.Int64Var(arg1, arg2, arg3, arg4)
}

func (p *FlagShim) IntVar(arg1 *int, arg2 string, arg3 int, arg4 string) {
	flag.IntVar(arg1, arg2, arg3, arg4)
}

func (p *FlagShim) Lookup(arg1 string) *flag.Flag {
	return flag.Lookup(arg1)
}

func (p *FlagShim) NArg() int {
	return flag.NArg()
}

func (p *FlagShim) NFlag() int {
	return flag.NFlag()
}

func (p *FlagShim) NewFlagSet(arg1 string, arg2 flag.ErrorHandling) *flag.FlagSet {
	return flag.NewFlagSet(arg1, arg2)
}

func (p *FlagShim) Parse() {
	flag.Parse()
}

func (p *FlagShim) Parsed() bool {
	return flag.Parsed()
}

func (p *FlagShim) PrintDefaults() {
	flag.PrintDefaults()
}

func (p *FlagShim) Set(arg1 string, arg2 string) error {
	return flag.Set(arg1, arg2)
}

func (p *FlagShim) String(arg1 string, arg2 string, arg3 string) *string {
	return flag.String(arg1, arg2, arg3)
}

func (p *FlagShim) StringVar(arg1 *string, arg2 string, arg3 string, arg4 string) {
	flag.StringVar(arg1, arg2, arg3, arg4)
}

func (p *FlagShim) Uint(arg1 string, arg2 uint, arg3 string) *uint {
	return flag.Uint(arg1, arg2, arg3)
}

func (p *FlagShim) Uint64(arg1 string, arg2 uint64, arg3 string) *uint64 {
	return flag.Uint64(arg1, arg2, arg3)
}

func (p *FlagShim) Uint64Var(arg1 *uint64, arg2 string, arg3 uint64, arg4 string) {
	flag.Uint64Var(arg1, arg2, arg3, arg4)
}

func (p *FlagShim) UintVar(arg1 *uint, arg2 string, arg3 uint, arg4 string) {
	flag.UintVar(arg1, arg2, arg3, arg4)
}

func (p *FlagShim) UnquoteUsage(arg1 *flag.Flag) (string, string) {
	return flag.UnquoteUsage(arg1)
}

func (p *FlagShim) Var(arg1 flag.Value, arg2 string, arg3 string) {
	flag.Var(arg1, arg2, arg3)
}

func (p *FlagShim) Visit(arg1 func(*flag.Flag)) {
	flag.Visit(arg1)
}

func (p *FlagShim) VisitAll(arg1 func(*flag.Flag)) {
	flag.VisitAll(arg1)
}

var _ Flag = new(FlagShim)
