// This file was generated by counterfeiter
package fakes

import (
	"net/http"
	"sync"

	"github.com/maxbrunsfeld/counterfeiter/fixtures"
)

type FakeEmbedsInterfaces struct {
	ServeHTTPStub        func(http.ResponseWriter, *http.Request)
	serveHTTPMutex       sync.RWMutex
	serveHTTPArgsForCall []struct {
		arg1 http.ResponseWriter
		arg2 *http.Request
	}
	EmbeddedMethodStub        func() string
	embeddedMethodMutex       sync.RWMutex
	embeddedMethodArgsForCall []struct{}
	embeddedMethodReturns struct {
		result1 string
	}
	DoThingsStub        func()
	doThingsMutex       sync.RWMutex
	doThingsArgsForCall []struct{}
}

func (fake *FakeEmbedsInterfaces) ServeHTTP(arg1 http.ResponseWriter, arg2 *http.Request) {
	fake.serveHTTPMutex.Lock()
	defer fake.serveHTTPMutex.Unlock()
	fake.serveHTTPArgsForCall = append(fake.serveHTTPArgsForCall, struct {
		arg1 http.ResponseWriter
		arg2 *http.Request
	}{arg1, arg2})
	if fake.ServeHTTPStub != nil {
		fake.ServeHTTPStub(arg1, arg2)
	}
}

func (fake *FakeEmbedsInterfaces) ServeHTTPCallCount() int {
	fake.serveHTTPMutex.RLock()
	defer fake.serveHTTPMutex.RUnlock()
	return len(fake.serveHTTPArgsForCall)
}

func (fake *FakeEmbedsInterfaces) ServeHTTPArgsForCall(i int) (http.ResponseWriter, *http.Request) {
	fake.serveHTTPMutex.RLock()
	defer fake.serveHTTPMutex.RUnlock()
	return fake.serveHTTPArgsForCall[i].arg1, fake.serveHTTPArgsForCall[i].arg2
}

func (fake *FakeEmbedsInterfaces) EmbeddedMethod() string {
	fake.embeddedMethodMutex.Lock()
	defer fake.embeddedMethodMutex.Unlock()
	fake.embeddedMethodArgsForCall = append(fake.embeddedMethodArgsForCall, struct{}{})
	if fake.EmbeddedMethodStub != nil {
		return fake.EmbeddedMethodStub()
	} else {
		return fake.embeddedMethodReturns.result1
	}
}

func (fake *FakeEmbedsInterfaces) EmbeddedMethodCallCount() int {
	fake.embeddedMethodMutex.RLock()
	defer fake.embeddedMethodMutex.RUnlock()
	return len(fake.embeddedMethodArgsForCall)
}

func (fake *FakeEmbedsInterfaces) EmbeddedMethodReturns(result1 string) {
	fake.embeddedMethodReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeEmbedsInterfaces) DoThings() {
	fake.doThingsMutex.Lock()
	defer fake.doThingsMutex.Unlock()
	fake.doThingsArgsForCall = append(fake.doThingsArgsForCall, struct{}{})
	if fake.DoThingsStub != nil {
		fake.DoThingsStub()
	}
}

func (fake *FakeEmbedsInterfaces) DoThingsCallCount() int {
	fake.doThingsMutex.RLock()
	defer fake.doThingsMutex.RUnlock()
	return len(fake.doThingsArgsForCall)
}

var _ fixtures.EmbedsInterfaces = new(FakeEmbedsInterfaces)
