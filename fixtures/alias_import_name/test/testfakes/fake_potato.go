// This file was generated by counterfeiter
package testfakes

import (
	ioAlias "io"
	"sync"

	"github.com/maxbrunsfeld/counterfeiter/fixtures/alias_import_name/test"
)

type FakePotato struct {
	TomatoStub        func(ioAlias.Reader)
	tomatoMutex       sync.RWMutex
	tomatoArgsForCall []struct {
		arg1 ioAlias.Reader
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePotato) Tomato(arg1 ioAlias.Reader) {
	fake.tomatoMutex.Lock()
	fake.tomatoArgsForCall = append(fake.tomatoArgsForCall, struct {
		arg1 ioAlias.Reader
	}{arg1})
	fake.recordInvocation("Tomato", []interface{}{arg1})
	fake.tomatoMutex.Unlock()
	if fake.TomatoStub != nil {
		fake.TomatoStub(arg1)
	}
}

func (fake *FakePotato) TomatoCallCount() int {
	fake.tomatoMutex.RLock()
	defer fake.tomatoMutex.RUnlock()
	return len(fake.tomatoArgsForCall)
}

func (fake *FakePotato) TomatoArgsForCall(i int) ioAlias.Reader {
	fake.tomatoMutex.RLock()
	defer fake.tomatoMutex.RUnlock()
	return fake.tomatoArgsForCall[i].arg1
}

func (fake *FakePotato) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.tomatoMutex.RLock()
	defer fake.tomatoMutex.RUnlock()
	return fake.invocations
}

func (fake *FakePotato) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ test.Potato = new(FakePotato)
