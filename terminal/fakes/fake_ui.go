// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/maxbrunsfeld/counterfeiter/terminal"
)

type FakeUI struct {
	TerminalIsTTYStub        func() bool
	terminalIsTTYMutex       sync.RWMutex
	terminalIsTTYArgsForCall []struct{}
	terminalIsTTYReturns     struct {
		result1 bool
	}
	ReadLineFromStdinStub        func() string
	readLineFromStdinMutex       sync.RWMutex
	readLineFromStdinArgsForCall []struct{}
	readLineFromStdinReturns     struct {
		result1 string
	}
	WriteStub        func(string)
	writeMutex       sync.RWMutex
	writeArgsForCall []struct {
		arg1 string
	}
	WriteLineStub        func(string)
	writeLineMutex       sync.RWMutex
	writeLineArgsForCall []struct {
		arg1 string
	}
}

func (fake *FakeUI) TerminalIsTTY() bool {
	fake.terminalIsTTYMutex.Lock()
	fake.terminalIsTTYArgsForCall = append(fake.terminalIsTTYArgsForCall, struct{}{})
	fake.terminalIsTTYMutex.Unlock()
	if fake.TerminalIsTTYStub != nil {
		return fake.TerminalIsTTYStub()
	} else {
		return fake.terminalIsTTYReturns.result1
	}
}

func (fake *FakeUI) TerminalIsTTYCallCount() int {
	fake.terminalIsTTYMutex.RLock()
	defer fake.terminalIsTTYMutex.RUnlock()
	return len(fake.terminalIsTTYArgsForCall)
}

func (fake *FakeUI) TerminalIsTTYReturns(result1 bool) {
	fake.TerminalIsTTYStub = nil
	fake.terminalIsTTYReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeUI) ReadLineFromStdin() string {
	fake.readLineFromStdinMutex.Lock()
	fake.readLineFromStdinArgsForCall = append(fake.readLineFromStdinArgsForCall, struct{}{})
	fake.readLineFromStdinMutex.Unlock()
	if fake.ReadLineFromStdinStub != nil {
		return fake.ReadLineFromStdinStub()
	} else {
		return fake.readLineFromStdinReturns.result1
	}
}

func (fake *FakeUI) ReadLineFromStdinCallCount() int {
	fake.readLineFromStdinMutex.RLock()
	defer fake.readLineFromStdinMutex.RUnlock()
	return len(fake.readLineFromStdinArgsForCall)
}

func (fake *FakeUI) ReadLineFromStdinReturns(result1 string) {
	fake.ReadLineFromStdinStub = nil
	fake.readLineFromStdinReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeUI) Write(arg1 string) {
	fake.writeMutex.Lock()
	fake.writeArgsForCall = append(fake.writeArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.writeMutex.Unlock()
	if fake.WriteStub != nil {
		fake.WriteStub(arg1)
	}
}

func (fake *FakeUI) WriteCallCount() int {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return len(fake.writeArgsForCall)
}

func (fake *FakeUI) WriteArgsForCall(i int) string {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return fake.writeArgsForCall[i].arg1
}

func (fake *FakeUI) WriteLine(arg1 string) {
	fake.writeLineMutex.Lock()
	fake.writeLineArgsForCall = append(fake.writeLineArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.writeLineMutex.Unlock()
	if fake.WriteLineStub != nil {
		fake.WriteLineStub(arg1)
	}
}

func (fake *FakeUI) WriteLineCallCount() int {
	fake.writeLineMutex.RLock()
	defer fake.writeLineMutex.RUnlock()
	return len(fake.writeLineArgsForCall)
}

func (fake *FakeUI) WriteLineArgsForCall(i int) string {
	fake.writeLineMutex.RLock()
	defer fake.writeLineMutex.RUnlock()
	return fake.writeLineArgsForCall[i].arg1
}

var _ terminal.UI = new(FakeUI)
